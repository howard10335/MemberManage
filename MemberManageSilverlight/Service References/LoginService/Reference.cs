//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.34209
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace MemberManageSilverlight.LoginService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoginService.ILoginService")]
    public interface ILoginService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/ValidateLogOn", ReplyAction="http://tempuri.org/ILoginService/ValidateLogOnResponse")]
        System.IAsyncResult BeginValidateLogOn(string Account, string Password, System.AsyncCallback callback, object asyncState);
        
        bool EndValidateLogOn(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginServiceChannel : MemberManageSilverlight.LoginService.ILoginService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateLogOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateLogOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginServiceClient : System.ServiceModel.ClientBase<MemberManageSilverlight.LoginService.ILoginService>, MemberManageSilverlight.LoginService.ILoginService {
        
        private BeginOperationDelegate onBeginValidateLogOnDelegate;
        
        private EndOperationDelegate onEndValidateLogOnDelegate;
        
        private System.Threading.SendOrPostCallback onValidateLogOnCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LoginServiceClient() {
        }
        
        public LoginServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoginServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<ValidateLogOnCompletedEventArgs> ValidateLogOnCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MemberManageSilverlight.LoginService.ILoginService.BeginValidateLogOn(string Account, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateLogOn(Account, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MemberManageSilverlight.LoginService.ILoginService.EndValidateLogOn(System.IAsyncResult result) {
            return base.Channel.EndValidateLogOn(result);
        }
        
        private System.IAsyncResult OnBeginValidateLogOn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Account = ((string)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return ((MemberManageSilverlight.LoginService.ILoginService)(this)).BeginValidateLogOn(Account, Password, callback, asyncState);
        }
        
        private object[] OnEndValidateLogOn(System.IAsyncResult result) {
            bool retVal = ((MemberManageSilverlight.LoginService.ILoginService)(this)).EndValidateLogOn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateLogOnCompleted(object state) {
            if ((this.ValidateLogOnCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateLogOnCompleted(this, new ValidateLogOnCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateLogOnAsync(string Account, string Password) {
            this.ValidateLogOnAsync(Account, Password, null);
        }
        
        public void ValidateLogOnAsync(string Account, string Password, object userState) {
            if ((this.onBeginValidateLogOnDelegate == null)) {
                this.onBeginValidateLogOnDelegate = new BeginOperationDelegate(this.OnBeginValidateLogOn);
            }
            if ((this.onEndValidateLogOnDelegate == null)) {
                this.onEndValidateLogOnDelegate = new EndOperationDelegate(this.OnEndValidateLogOn);
            }
            if ((this.onValidateLogOnCompletedDelegate == null)) {
                this.onValidateLogOnCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateLogOnCompleted);
            }
            base.InvokeAsync(this.onBeginValidateLogOnDelegate, new object[] {
                        Account,
                        Password}, this.onEndValidateLogOnDelegate, this.onValidateLogOnCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MemberManageSilverlight.LoginService.ILoginService CreateChannel() {
            return new LoginServiceClientChannel(this);
        }
        
        private class LoginServiceClientChannel : ChannelBase<MemberManageSilverlight.LoginService.ILoginService>, MemberManageSilverlight.LoginService.ILoginService {
            
            public LoginServiceClientChannel(System.ServiceModel.ClientBase<MemberManageSilverlight.LoginService.ILoginService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginValidateLogOn(string Account, string Password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = Account;
                _args[1] = Password;
                System.IAsyncResult _result = base.BeginInvoke("ValidateLogOn", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndValidateLogOn(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ValidateLogOn", _args, result)));
                return _result;
            }
        }
    }
}
